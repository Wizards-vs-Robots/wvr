name: Test, Build, Release

on: 
  push:
    branches: ['main']
  pull_request:
    branches: ['main', 'dev']


env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  testRunner:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-test-project-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-test-project-
            Library-
      - uses: game-ci/unity-test-runner@v2.0-alpha-5
        id: testRunner
        with:
          testMode: All
          checkName: test results
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          artifactsPath: artifacts
          customParameters: -debugCodeOptimization -enableCodeCoverage -coverageResultsPath artifacts/coverage-results -coverageOptions "generateHtmlReport;generateBadgeReport;generateAdditionalMetrics;generateHtmlReportHistory;assemblyFilters:+Scripts"

      - uses: actions/upload-artifact@v2
        with:
          name: Test results
          path: ${{ steps.testRunner.outputs.artifactsPath }}

      - name: Upload XML report to Codecov
        uses: codecov/codecov-action@v2
        with:
          name: All
          flags: automated
          token: ${{ secrets.CODECOV_TOKEN }}
          files: artifacts/coverage-results/**/*.xml


  release:
    needs: testRunner
    name: Build & Release
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      #BUILD

      # Windows
      # caching stuff
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-build-StandaloneWindows64
          restore-keys: |
            Library-build-
            Library-
      # build
      - uses: game-ci/unity-builder@v2
        with:
          targetPlatform: StandaloneWindows64

      # zip builds
      - uses: montudor/action-zip@v1
        with:
          args: zip -qq -r build/build-StandaloneWindows64.zip build/StandaloneWindows64

      # Linux
      # caching stuff
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-build-StandaloneLinux64
          restore-keys: |
            Library-build-
            Library-
      - name: check status
        run: git status
      # build
      - uses: game-ci/unity-builder@v2
        with:
          targetPlatform: StandaloneLinux64
      - name: check status
        run: git status

      # zip builds
      - uses: montudor/action-zip@v1
        with:
          args: zip -qq -r build/build-StandaloneLinux64.zip build/StandaloneLinux64

      # RELEASE
      # Create semver tag and changelog
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: main

      # Create GitHub release once images have been pushed
      - name: Create a GitHub release ${{ steps.tag_version.outputs.new_tag }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
          artifacts: "build/build-StandaloneWindows64.zip,build/build-StandaloneLinux64.zip"

#   deployPages:
#     needs: buildWebGL
#     name: Deploy to Github Pages ðŸš€
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - uses: actions/download-artifact@v2
#         with:
#           name: build-WebGL
#           path: build

#       - name: Deploy ðŸš€
#         uses: JamesIves/github-pages-deploy-action@4.1.4
#         with:
#           branch: gh-pages
#           folder: build/WebGL